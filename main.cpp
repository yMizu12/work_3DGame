//=============================================================================
//
// メイン処理 [main.cpp]
// Author : HAL東京_水野裕介
//
//=============================================================================
#include "main.h"
#include "renderer.h"
#include "light.h"
#include "input.h"
#include "camera.h"
#include "sound.h"
#include "model.h"
#include "player.h"
#include "enemy.h"
#include "game.h"
#include "fade.h"
#include "title.h"
#include "story.h"
#include "result.h"
#include "tutorial.h"
#include "debugproc.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define CLASS_NAME		"AppClass"								// ウインドウのクラス名
#define WINDOW_NAME		"Village Savior (HAL東京_水野裕介)"		// ウインドウのキャプション名

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
HRESULT Init(HINSTANCE hInstance, HWND hWnd, BOOL bWindow);
void Uninit(void);
void Update(void);
void Draw(void);

void CheckHit(void);


//
long mouseX = 0;
long mouseY = 0;


#ifdef _DEBUG
int		countFPS;						// FPSカウンタ
char	debugStr[2048] = WINDOW_NAME;	// デバッグ文字表示用
#endif

int mode = MODE_TITLE;					// 起動時の画面を設定

//=============================================================================
// メイン関数
//=============================================================================
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);	// 無くても良いけど、警告が出る（未使用宣言）
	UNREFERENCED_PARAMETER(lpCmdLine);		// 無くても良いけど、警告が出る（未使用宣言）

	// 時間計測用
	DWORD dwExecLastTime;
	DWORD dwFPSLastTime;
	DWORD dwCurrentTime;
	DWORD dwFrameCount;

	// ウィンドウクラス情報を含む構造体
	WNDCLASSEX	wcex = {
		sizeof(WNDCLASSEX),				// 構造体のサイズ
		CS_CLASSDC,						// クラススタイル
		WndProc,						// ウィンドウプロシージャへのポインター
		0,								// ウィンドウクラス構造体の後に割り当てる余分なバイト数
		0,								// ウィンドウインスタンスの後に割り当てる余分なバイト数
		hInstance,						// ウィンドウプロシージャを含むインスタンスへのハンドル
		NULL,							// アイコンへのハンドル（NULLの場合、既定のアイコン）
		LoadCursor(NULL, IDC_ARROW),	// カーソルへのハンドル
		(HBRUSH)(COLOR_WINDOW + 1),		// 背景ブラシへのハンドル
		NULL,							// メニューのリソース名を指定する文字列へのポインター（NULLの場合、ウィンドウに既定のメニューなし）
		CLASS_NAME,						// ウィンドウのクラス名
		NULL							// アイコンへのハンドル
	};

	HWND		hWnd;
	MSG			msg;
	
	// ウィンドウクラスの登録
	RegisterClassEx(&wcex);

	// ウィンドウの作成
	hWnd = CreateWindow(CLASS_NAME,
		WINDOW_NAME,
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,																			// ウィンドウの左座標
		CW_USEDEFAULT,																			// ウィンドウの上座標
		SCREEN_WIDTH + GetSystemMetrics(SM_CXDLGFRAME) * 2,										// ウィンドウ横幅
		SCREEN_HEIGHT + GetSystemMetrics(SM_CXDLGFRAME) * 2 + GetSystemMetrics(SM_CYCAPTION),	// ウィンドウ縦幅
		NULL,
		NULL,
		hInstance,
		NULL);

	// DirectXの初期化(ウィンドウを作成してから行う)
	BOOL mode = TRUE;

	int id = MessageBox(NULL, "Windowモードでプレイしますか？", "起動モード", MB_YESNOCANCEL | MB_ICONQUESTION);
	switch (id)
	{
	case IDYES:		// YesならWindowモードで起動
		mode = TRUE;
		break;
	case IDNO:		// Noならフルスクリーンモードで起動
		mode = FALSE;
		break;
	case IDCANCEL:	// CANCELなら終了
	default:
		return -1;
		break;
	}

	// DirectXの初期化(ウィンドウを作成してから行う)
	if (FAILED(Init(hInstance, hWnd, mode)))
	{
		return -1;
	}

	// フレームカウント初期化
	timeBeginPeriod(1);								// 分解能を設定
	dwExecLastTime = dwFPSLastTime = timeGetTime();	// システム時刻をミリ秒単位で取得
	dwCurrentTime = dwFrameCount = 0;

	// ランダムの初期化処理
	srand((unsigned)time(NULL));

	// ウインドウの表示(初期化処理の後に呼ばないと駄目)
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);
	
	// メッセージループ
	while(1)
	{
		if(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if(msg.message == WM_QUIT)
			{// PostQuitMessage()が呼ばれたらループ終了
				break;
			}
			else
			{
				// メッセージの翻訳と送出
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}
		}
		else
		{
			dwCurrentTime = timeGetTime();

			if ((dwCurrentTime - dwFPSLastTime) >= 1000)	// 1秒ごとに実行
			{
#ifdef _DEBUG
				countFPS = dwFrameCount;
#endif
				dwFPSLastTime = dwCurrentTime;				// FPSを測定した時刻を保存
				dwFrameCount = 0;							// カウントをクリア
			}

			if ((dwCurrentTime - dwExecLastTime) >= (1000 / 60))	// 1/60秒ごとに実行
			{
				dwExecLastTime = dwCurrentTime;		// 処理した時刻を保存

#ifdef _DEBUG	// デバッグ版の時だけFPSを表示する
				wsprintf(debugStr, WINDOW_NAME);
				wsprintf(&debugStr[strlen(debugStr)], " FPS:%d", countFPS);
#endif

				Update();		// 更新処理
				Draw();			// 描画処理

#ifdef _DEBUG	// デバッグ版の時だけ表示する
				wsprintf(&debugStr[strlen(debugStr)], " MX:%d MY:%d", GetMousePosX(), GetMousePosY());
				SetWindowText(hWnd, debugStr);
#endif

				dwFrameCount++;
			}
		}
	}

	timeEndPeriod(1);		// 分解能を戻す

	// ウィンドウクラスの登録を解除
	UnregisterClass(CLASS_NAME, wcex.hInstance);

	// 終了処理
	Uninit();

	return (int)msg.wParam;
}

//=============================================================================
// プロシージャ
//=============================================================================
// ※ Windowsから送られてきたメッセージを処理するコールバック関数
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch(message)
	{
		case WM_DESTROY:
			PostQuitMessage(0);
			break;

		case WM_KEYDOWN:
			switch(wParam)
			{
				case VK_ESCAPE:				// ESCキー押下でWindowを破棄
					DestroyWindow(hWnd);
					break;
			}
			break;

		case WM_MOUSEMOVE:
			mouseX = LOWORD(lParam);
			mouseY = HIWORD(lParam);
			break;

		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return 0;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT Init(HINSTANCE hInstance, HWND hWnd, BOOL bWindow)
{
	InitRenderer(hInstance, hWnd, bWindow);

	InitLight();

	InitCamera();

	SetViewPort(TYPE_FULL_SCREEN);

	// 入力処理の初期化
	InitInput(hInstance, hWnd);

	// サウンドの初期化
	InitSound(hWnd);

	// ライトを有効化
	SetLightEnable(TRUE);

	// 背面ポリゴンをカリング
	SetCullingMode(CULL_MODE_BACK);

	// フェードの初期化
	InitFade();

	// 最初のモードをセット
	SetMode(mode);


	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void Uninit(void)
{
	// 終了のモードをセット
	SetMode(MODE_MAX);

	// フェードの終了処理
	UninitFade();

	// サウンド終了処理
	UninitSound();

	// カメラの終了処理
	UninitCamera();

	//入力の終了処理
	UninitInput();

	UninitRenderer();
}

//=============================================================================
// 更新処理
//=============================================================================
void Update(void)
{
	// 入力の更新処理
	UpdateInput();

	// ライトの更新処理
	UpdateLight();

	// カメラ更新
	UpdateCamera();

	// モードによって処理を分ける
	switch (mode)
	{
		case MODE_TITLE:		// タイトル画面の更新
			UpdateTitle();
			break;

		case MODE_STORY:		// あらすじ画面の更新
			UpdateStory();
			break;

		case MODE_TUTORIAL:		// チュートリアル画面の更新
			UpdateTutorial();
			break;

		case MODE_GAME:			// ゲーム画面の更新
			UpdateGame();
			break;

		case MODE_RESULT:		// リザルト画面の更新
			UpdateResult();
			break;
	}

	// フェード処理の更新
	UpdateFade();


}

//=============================================================================
// 描画処理
//=============================================================================
void Draw(void)
{
	// バックバッファクリア
	Clear();

	SetCamera();

	// モードによって処理を分ける
	switch (mode)
	{
		case MODE_TITLE:		// タイトル画面の描画
			SetViewPort(TYPE_FULL_SCREEN);

			// 2Dの物を描画する処理
			// Z比較なし
			SetDepthEnable(FALSE);

			// ライティングを無効
			SetLightEnable(FALSE);

			DrawTitle();

			// ライティングを有効に
			SetLightEnable(TRUE);

			// Z比較あり
			SetDepthEnable(TRUE);
			break;

		case MODE_STORY:		// あらすじ画面の描画
			SetViewPort(TYPE_FULL_SCREEN);

			// 2Dの物を描画する処理
			// Z比較なし
			SetDepthEnable(FALSE);

			// ライティングを無効
			SetLightEnable(FALSE);

			DrawStory();

			// ライティングを有効に
			SetLightEnable(TRUE);

			// Z比較あり
			SetDepthEnable(TRUE);
			break;

		case MODE_TUTORIAL:		// チュートリアル画面の描画
			SetViewPort(TYPE_FULL_SCREEN);

			// 2Dの物を描画する処理
			// Z比較なし
			SetDepthEnable(FALSE);

			// ライティングを無効
			SetLightEnable(FALSE);

			DrawTutorial();

			// ライティングを有効に
			SetLightEnable(TRUE);

			// Z比較あり
			SetDepthEnable(TRUE);
			break;

		case MODE_GAME:			// ゲーム画面の描画
			DrawGame();
			break;

		case MODE_RESULT:		// リザルト画面の描画
			SetViewPort(TYPE_FULL_SCREEN);

			// 2Dの物を描画する処理
			// Z比較なし
			SetDepthEnable(FALSE);

			// ライティングを無効
			SetLightEnable(FALSE);

			DrawResult();

			// ライティングを有効に
			SetLightEnable(TRUE);

			// Z比較あり
			SetDepthEnable(TRUE);
			break;
	}



	{	// フェード処理
		SetViewPort(TYPE_FULL_SCREEN);

		// 2Dの物を描画する処理
		// Z比較なし
		SetDepthEnable(FALSE);

		// ライティングを無効
		SetLightEnable(FALSE);

		// フェード描画
		DrawFade();

		// ライティングを有効に
		SetLightEnable(TRUE);

		// Z比較あり
		SetDepthEnable(TRUE);
	}


#ifdef _DEBUG
	// デバッグ表示
	DrawDebugProc();
#endif

	// バックバッファ、フロントバッファ入れ替え
	Present();
}


long GetMousePosX(void)
{
	return mouseX;
}


long GetMousePosY(void)
{
	return mouseY;
}


#ifdef _DEBUG
char* GetDebugStr(void)
{
	return debugStr;
}
#endif


//=============================================================================
// モードの設定
//=============================================================================
void SetMode(int nextMode)
{
	// モードを変える前に全部メモリを解放する

	// タイトル画面の終了処理
	UninitTitle();

	// あらすじ画面の終了処理
	UninitStory();

	// チュートリアル画面の終了処理
	UninitTutorial();

	// ゲーム画面の終了処理
	UninitGame();

	// リザルト画面の終了処理
	UninitResult();


	mode = nextMode;	// 次のモードをセットしている

	switch (mode)
	{
	case MODE_TITLE:
		// タイトル画面の初期化
		InitTitle();
		break;

	case MODE_STORY:
		// あらすじ画面の初期化
		InitStory();
		break;

	case MODE_TUTORIAL:
		// チュートリアル画面の初期化
		InitTutorial();
		break;

	case MODE_GAME:
		// カメラもここで初期化しておく
		UninitCamera();
		InitCamera();
		// ゲーム画面の初期化
		InitGame();
		break;

	case MODE_RESULT:
		// リザルト画面の初期化
		InitResult();
		break;

		// ゲーム終了時の処理
	case MODE_MAX:
		// エネミーの終了処理
		UninitEnemy();
		
		// プレイヤーの終了処理
		UninitPlayer();
		break;
	}
}

//=============================================================================
// モードの取得
//=============================================================================
int GetMode(void)
{
	return mode;
}
